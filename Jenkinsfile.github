@Library('cms-meta-tools') _
@Library('csm-shared-library') __

def runBuildPrep() {
    sh "make runbuildprep"
}

def runLint() {
    sh "make lint"
}

pipeline {
    agent none
    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        timestamps()
    }

    environment {
        NAME = "cfs-trust"
        DESCRIPTION = "Configuration Framework Service Trust Environment"
        IS_STABLE = getBuildIsStable()
    }

    stages {
        stage("Python module and RPM") {
            agent {
                docker {
                    label "metal-gcp-builder"
                    image "arti.dev.cray.com/dstbuildenv-docker-master-local/cray-sle15sp2_build_environment:latest"
                }
            }
            environment {
                PYTHON_MODULE_NAME = "cfs-ssh-trust"
                BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)
            }
            stages {
                stage("Clone cms_meta_tools repo") {
                    steps {
                        // This function is defined in cms-meta-tools:vars/cloneCMSMetaTools.groovy
                        cloneCMSMetaTools()
                    }
                }

                stage("Set Versions") {
                    steps {
                        // This function is defined in cms-meta-tools:vars/setVersionFiles.groovy
                        setVersionFiles()
                    }
                }

                stage("runBuildPrep") {
                    steps { runBuildPrep() }
                }

                stage("Lint") {
                    steps { runLint() }
                }

                stage("Add RPM Metadata") {
                    steps {
                        echo "RPM build metadata is ${env.BUILD_METADATA}"
                        runLibraryScript("addRpmMetaData.sh", "")
                    }
                }

                stage("Prepare") {
                    steps {
                        sh "make prepare"
                    }
                }

                stage('Build Python Module') {
                    steps { sh "make pymod" }
                }

                stage('Build RPM') {
                    environment {BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)}
                    steps { 
                        sh "make rpm" 
                        stash includes: 'dist', name: 'dist'
                    }
                }

                stage('Publish') {
                    steps {
                        publishCsmPythonModules(module: env.PYTHON_MODULE_NAME, isStable: env.IS_STABLE)
                    }
                }
            }
        }

        stage("Chart and Image") {
            agent {
                label "metal-gcp-builder"
            }
            stages {
                stage("Publish RPMs from last step") {
                    steps {
                        unstash 'dist'
                        publishCsmRpms(component: env.NAME, pattern: "dist/rpmbuild/RPMS/x86_64/*.rpm", arch: "x86_64", isStable: env.IS_STABLE)
                        publishCsmRpms(component: env.NAME, pattern: "dist/rpmbuild/SRPMS/*.rpm", arch: "src", isStable: env.IS_STABLE)
                    }
                }
                stage("Clone cms_meta_tools repo") {
                    steps {
                        // This function is defined in cms-meta-tools:vars/cloneCMSMetaTools.groovy
                        cloneCMSMetaTools()
                    }
                }

                stage("Set Versions") {
                    steps {
                        // This function is defined in cms-meta-tools:vars/setVersionFiles.groovy
                        setVersionFiles()
                    }
                }

                stage("runBuildPrep") {
                    steps { runBuildPrep() }
                }

                stage("Lint") {
                    steps { runLint() }
                }

                stage("Build") {
                    parallel {
                        stage('Image') {
                            environment {
                                DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
                                DOCKER_ARGS = getDockerBuildArgs(name: env.NAME, description: env.DESCRIPTION, version: env.DOCKER_VERSION)
                            }

                            steps { sh "make image" }
                        }

                        stage('Chart') {
                            environment {
                                DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
                            }

                            steps {
                                updateCsmHelmChartAppVersion(chartPath: "${WORKSPACE}/kubernetes/${NAME}", appVersion: env.DOCKER_VERSION)
                                sh "make chart"
                            }
                        }
                    }
                }

                stage('Publish ') {
                    environment {
                        DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
                    }

                    steps {
                        publishCsmDockerImage(image: env.NAME, tag: env.DOCKER_VERSION, isStable: env.IS_STABLE)
                        publishCsmHelmCharts(component: env.NAME, chartsPath: "${WORKSPACE}/kubernetes/.packaged", isStable: env.IS_STABLE)
                    }
                }
            }
        }
    }
}
