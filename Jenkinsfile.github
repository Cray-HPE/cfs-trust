/*
 *
 *  MIT License
 *
 *  (C) Copyright 2021-2024 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 */
@Library('cms-meta-tools') _
@Library('csm-shared-library') __

def runBuildPrep() {
     withCredentials([usernamePassword(credentialsId: 'artifactory-algol60-readonly', passwordVariable: 'ARTIFACTORY_PASSWORD', usernameVariable: 'ARTIFACTORY_USERNAME')]) {
        sh "make runbuildprep"
        }
}

def runLint() {
    sh "make lint"
}

def pyImage = 'artifactory.algol60.net/csm-docker/stable/csm-docker-sle-python'

pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        disableConcurrentBuilds()
        timeout(time: 90, unit: 'MINUTES')
        timestamps()
    }

    environment {
        NAME = "cfs-trust"
        DESCRIPTION = "Configuration Framework Service Trust Environment"
        IS_STABLE = getBuildIsStable()
        DOCKER_BUILDKIT = "1"
        // Extract the Python version from setup.py
        PY_VERSION = sh(returnStdout: true, script: "grep -Eo 'Programming Language :: Python :: [1-9][0-9]*[.][0-9][0-9]*' setup.py | grep -Eo '[1-9][0-9]*[.][0-9][0-9]*'").trim()
    }

    stages {
        stage("Clone cms_meta_tools repo") {
            steps {
                // This function is defined in cms-meta-tools:vars/cloneCMSMetaTools.groovy
                cloneCMSMetaTools()
            }
        }

        stage("Set Versions") {
            steps {
                // This function is defined in cms-meta-tools:vars/setVersionFiles.groovy
                setVersionFiles()
            }
        }

        stage("runBuildPrep") {
            steps { runBuildPrep() }
        }

        // Because of how the cfs-trust RPM is packaged, it is simpler for us to copy the
        // requests_retry_session Python module into its source, rather than install it
        // separately
        stage("Get requests_retry_session") {
            environment {
                // Get the correct version of requests_retry_session from requests-retry-session.version,
                // generated during the runBuildPrep stage
                RRS_VERSION = readFile("requests-retry-session.version").trim()
            }
            steps {
                // Clone the repo -- this function is defined in cms-meta-tools:vars/cloneGitRepo.groovy
                cloneGitRepo('https://github.com/Cray-HPE/requests-retry-session.git', branchName: "")

                // Check out the tag for the desired version
                sh "git -C ./requests-retry-session checkout 'tags/v${env.RRS_VERSION}'"

                // Copy the source files into our source tree
                sh "cp -r ./requests-retry-session/requests_retry_session ./src/cfsssh"
            }
        }

        stage("Lint") {
            steps { runLint() }
        }

        stage("Python module") {
            agent {
                docker {
                    label 'python'
                    image "${pyImage}:${env.PY_VERSION}"
                    reuseNode true
                }
            }
            environment {
                PYTHON_MODULE_NAME = "cfs-ssh-trust"
                BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)
            }
            stages {

                stage("Prepare") {
                    steps {
                        sh "make prepare"
                    }
                }

                stage('Build Python Module') {
                    steps { sh "make pymod" }
                }

                stage('Publish Python Module') {
                    steps {
                        publishCsmPythonModules(module: env.PYTHON_MODULE_NAME, isStable: env.IS_STABLE)
                    }
                }
            }
        }

        stage("Add RPM Metadata") {
            steps {
                echo "RPM build metadata is ${env.BUILD_METADATA}"
                runLibraryScript("addRpmMetaData.sh", "")
            }
        }

        stage("Build Chart, Image, and RPMs") {
            parallel {
                stage('Image') {
                    environment {
                        DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
                        DOCKER_ARGS = getDockerBuildArgs(name: env.NAME, description: env.DESCRIPTION, version: env.DOCKER_VERSION)
                    }
                    steps { sh "make image" }
                }

                stage('Chart') {
                    environment {
                        DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
                    }
                    steps {
                        updateCsmHelmChartAppVersion(chartPath: "${WORKSPACE}/kubernetes/${NAME}", appVersion: env.DOCKER_VERSION)
                        sh "make chart"
                    }
                }
                stage('RPM') {
                    environment {
                        BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)
                    }
                    agent {
                        docker {
                            label 'python'
                            image "${pyImage}:${env.PY_VERSION}"
                            reuseNode true
                        }
                    }
                    steps {
                        sh "make rpm"
                    }
                }
            }
        }

        stage('Publish ') {
            parallel {
                stage('Publish Docker') {
                    environment {
                        DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
                    }
                    steps {
                        publishCsmDockerImage(image: env.NAME, tag: env.DOCKER_VERSION, isStable: env.IS_STABLE)
                    }
                }
                stage('Publish Helm Chart') {
                    steps {
                        publishCsmHelmCharts(component: env.NAME, chartsPath: "${WORKSPACE}/kubernetes/.packaged", isStable: env.IS_STABLE)
                    }
                }
                stage('Publish RPMs') {
                    steps {
                        publishCsmRpms(component: env.NAME, pattern: "dist/rpmbuild/RPMS/noarch/*.rpm", os: "noos", arch: "noarch", isStable: env.IS_STABLE)
                        publishCsmRpms(component: env.NAME, pattern: "dist/rpmbuild/SRPMS/*.rpm", os: "noos", arch: "src", isStable: env.IS_STABLE)
                    }
                }
            }
        }
    }
}
