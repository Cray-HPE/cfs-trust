/*
 *
 *  MIT License
 *
 *  (C) Copyright 2021-2022 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 */
@Library('cms-meta-tools') _
@Library('csm-shared-library') __

def runBuildPrep() {
     withCredentials([usernamePassword(credentialsId: 'artifactory-algol60-readonly', passwordVariable: 'ARTIFACTORY_PASSWORD', usernameVariable: 'ARTIFACTORY_USERNAME')]) {
        sh "make runbuildprep"
        }
}

def runLint() {
    sh "make lint"
}

pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        timestamps()
    }

    environment {
        NAME = "cfs-trust"
        DESCRIPTION = "Configuration Framework Service Trust Environment"
        IS_STABLE = getBuildIsStable()
	DOCKER_BUILDKIT = "1"
        PUBLISH_SP2 = "sle-15sp2"
        PUBLISH_SP3 = "sle-15sp3"
        PUBLISH_SP4 = "sle-15sp4"
    }

    stages {
        stage("Clone cms_meta_tools repo") {
            steps {
                // This function is defined in cms-meta-tools:vars/cloneCMSMetaTools.groovy
                cloneCMSMetaTools()
            }
        }

        stage("Set Versions") {
            steps {
                // This function is defined in cms-meta-tools:vars/setVersionFiles.groovy
                setVersionFiles()
            }
        }

        stage("runBuildPrep") {
            steps { runBuildPrep() }
        }

        stage("Lint") {
            steps { runLint() }
        }

        stage("Python module") {
            agent {
                docker {
                    image "arti.hpc.amslabs.hpecorp.net/dstbuildenv-docker-master-local/cray-sle15sp3_build_environment:latest"
                    reuseNode true
                    // Support docker in docker for clamav scan
                    args "-v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker --group-add 999"
                }
            }
            environment {
                PYTHON_MODULE_NAME = "cfs-ssh-trust"
                BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)
            }
            stages {

                stage("Prepare") {
                    steps {
                        sh "make prepare"
                    }
                }

                stage('Build Python Module') {
                    steps { sh "make pymod" }
                }

                stage('Publish Python Module') {
                    steps {
                        publishCsmPythonModules(module: env.PYTHON_MODULE_NAME, isStable: env.IS_STABLE)
                    }
                }
            }
        }

        stage("Add RPM Metadata") {
            steps {
                echo "RPM build metadata is ${env.BUILD_METADATA}"
                runLibraryScript("addRpmMetaData.sh", "")
            }
        }

        stage('Build SP2 RPM') {
            environment {
                BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)
            }
            agent {
                docker {
                    image "arti.hpc.amslabs.hpecorp.net/dstbuildenv-docker-master-local/cray-sle15sp2_build_environment:latest"
                    reuseNode true
                    // Support docker in docker for clamav scan
                    args "-v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker --group-add 999"
                }
            }
            steps {
                sh "make rpm"
                // We cannot publish the RPM from inside this container because it requires use
                // of a docker container to sign the RPMs. So we save off the RPM artifacts and
                // restore them in a later stage for publishing
                stash includes: 'dist/rpmbuild/*RPMS/**/*.rpm', name: 'SP2 Rpms'
            }
        }

        stage('Build SP3 RPM') {
            environment {
                BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)
            }
            agent {
                docker {
                    image "arti.hpc.amslabs.hpecorp.net/dstbuildenv-docker-master-local/cray-sle15sp3_build_environment:latest"
                    reuseNode true
                    // Support docker in docker for clamav scan
                    args "-v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker --group-add 999"
                }
            }
            steps {
                sh "make rpm"
                // We cannot publish the RPM from inside this container because it requires use
                // of a docker container to sign the RPMs. So we save off the RPM artifacts and
                // restore them in a later stage for publishing
                stash includes: 'dist/rpmbuild/*RPMS/**/*.rpm', name: 'SP3 Rpms'
            }
        }

        stage('Build SP4 RPM') {
            environment {
                BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)
            }
            agent {
                docker {
                    image "arti.hpc.amslabs.hpecorp.net/dstbuildenv-docker-master-local/cray-sle15sp4_build_environment:latest"
                    reuseNode true
                    // Support docker in docker for clamav scan
                    args "-v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker --group-add 999"
                }
            }
            steps {
                sh "make rpm"
                // We cannot publish the RPM from inside this container because it requires use
                // of a docker container to sign the RPMs. So we save off the RPM artifacts and
                // restore them in a later stage for publishing
                stash includes: 'dist/rpmbuild/*RPMS/**/*.rpm', name: 'SP4 Rpms'
            }
        }

        stage("Chart and Image") {
            stages {
                stage("Build") {
                    parallel {
                        stage('Image') {
                            environment {
                                DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
                                DOCKER_ARGS = getDockerBuildArgs(name: env.NAME, description: env.DESCRIPTION, version: env.DOCKER_VERSION)
                            }

                            steps { sh "make image" }
                        }

                        stage('Chart') {
                            environment {
                                DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
                            }

                            steps {
                                updateCsmHelmChartAppVersion(chartPath: "${WORKSPACE}/kubernetes/${NAME}", appVersion: env.DOCKER_VERSION)
                                sh "make chart"
                            }
                        }
                    }
                }

                stage('Publish ') {
                    environment {
                        DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
                    }
                    steps {
                        // Restore previously-stashed RPM artifacts
                        publishCsmDockerImage(image: env.NAME, tag: env.DOCKER_VERSION, isStable: env.IS_STABLE)
                        publishCsmHelmCharts(component: env.NAME, chartsPath: "${WORKSPACE}/kubernetes/.packaged", isStable: env.IS_STABLE)
                    }
                }
                stage('Publish SP2 Rpms') {
                    steps {
                        unstash 'SP2 Rpms'
                        publishCsmRpms(component: env.NAME, pattern: "dist/rpmbuild/RPMS/noarch/*.rpm", os: env.PUBLISH_SP2, arch: "noarch", isStable: env.IS_STABLE)
                        publishCsmRpms(component: env.NAME, pattern: "dist/rpmbuild/SRPMS/*.rpm", os: env.PUBLISH_SP2, arch: "src", isStable: env.IS_STABLE)
                    }
                }

                stage('Publish SP3 Rpms') {
                    steps {
                        unstash 'SP3 Rpms'
                        publishCsmRpms(component: env.NAME, pattern: "dist/rpmbuild/RPMS/noarch/*.rpm", os: env.PUBLISH_SP3, arch: "noarch", isStable: env.IS_STABLE)
                        publishCsmRpms(component: env.NAME, pattern: "dist/rpmbuild/SRPMS/*.rpm", os: env.PUBLISH_SP3, arch: "src", isStable: env.IS_STABLE)
                    }
                }

                stage('Publish SP4 Rpms') {
                    steps {
                        unstash 'SP4 Rpms'
                        publishCsmRpms(component: env.NAME, pattern: "dist/rpmbuild/RPMS/noarch/*.rpm", os: env.PUBLISH_SP4, arch: "noarch", isStable: env.IS_STABLE)
                        publishCsmRpms(component: env.NAME, pattern: "dist/rpmbuild/SRPMS/*.rpm", os: env.PUBLISH_SP4, arch: "src", isStable: env.IS_STABLE)
                    }
                }
            }
        }
    }
}
